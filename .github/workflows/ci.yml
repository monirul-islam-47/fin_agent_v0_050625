name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: v1

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy
          pip install -r requirements.txt
      
      - name: Format check with Black
        run: black --check src/ tests/ dashboard.py
      
      - name: Lint with Flake8
        run: flake8 src/ tests/ dashboard.py --max-line-length=100 --extend-ignore=E203,W503
      
      - name: Type check with MyPy
        run: mypy src/ --ignore-missing-imports --no-strict-optional

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-timeout
      
      - name: Create test environment
        run: |
          cp .env.template .env
          echo "FINNHUB_API_KEY=test_key" >> .env
          echo "ALPHA_VANTAGE_API_KEY=test_key" >> .env
          echo "NEWS_API_KEY=test_key" >> .env
          mkdir -p data/universe
          echo "symbol" > data/universe/revolut_universe.csv
          echo "AAPL" >> data/universe/revolut_universe.csv
          echo "MSFT" >> data/universe/revolut_universe.csv
      
      - name: Run unit tests
        run: pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
      
      - name: Run integration tests
        run: pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=term-missing
      
      - name: Run system tests
        run: pytest tests/system/ -v --cov=src --cov-append --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -r requirements.txt
      
      - name: Security check with Safety
        run: safety check --json
        continue-on-error: true
      
      - name: Security check with Bandit
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark memory-profiler
      
      - name: Create test environment
        run: |
          cp .env.template .env
          echo "FINNHUB_API_KEY=test_key" >> .env
          echo "ALPHA_VANTAGE_API_KEY=test_key" >> .env
          echo "NEWS_API_KEY=test_key" >> .env
          mkdir -p data/universe
          python -c "
import csv
with open('data/universe/revolut_universe.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['symbol'])
    for i in range(500):
        writer.writerow([f'TEST{i:03d}'])
"
      
      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
        continue-on-error: true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

  build:
    name: Build & Package
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  docker:
    name: Docker Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            fin-agent:latest
            fin-agent:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max